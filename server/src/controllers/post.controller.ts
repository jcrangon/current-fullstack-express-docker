import { Request, Response } from "express";
import { prisma } from "../db/postgres";
import { AuditLog } from "../db/mongo";

export async function listPosts(_req: Request, res: Response) {
  const posts = await prisma.post.findMany({ include: { author: { select: { id: true, name: true } } } });
  res.json(posts);
}
export async function getPost(req: Request, res: Response) {
  const id = Number(req.params.id);
  const post = await prisma.post.findUnique({ where: { id }, include: { author: { select: { id: true, name: true } } } });
  if (!post) return res.status(404).json({ error: "Not found" });
  res.json(post);
}
export async function createPost(req: Request, res: Response) {
  const userId = Number((req as any).user.sub);
  const { title, content } = req.body;
  const coverUrl = req.file ? `/uploads/${req.file.filename}` : undefined;
  const post = await prisma.post.create({ data: { title, content, authorId: userId, coverUrl } });
  await AuditLog.create({ userId, action: "POST_CREATED", meta: { postId: post.id } });
  res.status(201).json(post);
}
export async function updatePost(req: Request, res: Response) {
  const id = Number(req.params.id);
  const { title, content } = req.body;
  const coverUrl = req.file ? `/uploads/${req.file.filename}` : undefined;
  const post = await prisma.post.update({
    where: { id },
    data: { title, content, ...(coverUrl ? { coverUrl } : {}) }
  });
  res.json(post);
}
export async function deletePost(req: Request, res: Response) {
  const id = Number(req.params.id);
  await prisma.post.delete({ where: { id } });
  res.json({ ok: true });
}


/// ============================================================================
/// ðŸ“˜ RÃ©sumÃ© pÃ©dagogique complet â€” ContrÃ´leur de gestion des publications (Posts)
/// ----------------------------------------------------------------------------
/// ðŸ”¹ 1. Objectif du fichier
/// Ce fichier dÃ©finit un **ensemble de fonctions contrÃ´leurs** Express dÃ©diÃ©es
/// Ã  la ressource `Post`.  
/// Chaque fonction correspond Ã  une action de type CRUD :
/**
 * - listPosts   â†’ lecture de tous les posts
 * - getPost     â†’ lecture dâ€™un post unique
 * - createPost  â†’ crÃ©ation dâ€™un nouveau post
 * - updatePost  â†’ mise Ã  jour dâ€™un post existant
 * - deletePost  â†’ suppression dâ€™un post
 */
///
/// Ces fonctions sont destinÃ©es Ã  Ãªtre utilisÃ©es dans des routes Express :
///
/// ```ts
/// import { Router } from "express";
/// import * as postCtrl from "../controllers/post.controller";
///
/// const r = Router();
/// r.get("/", postCtrl.listPosts);
/// r.get("/:id", postCtrl.getPost);
/// r.post("/", postCtrl.createPost);
/// r.put("/:id", postCtrl.updatePost);
/// r.delete("/:id", postCtrl.deletePost);
/// export default r;
/// ```
///
/// ----------------------------------------------------------------------------
/// ðŸ”¹ 2. Les dÃ©pendances
/// - `prisma` : client Prisma connectÃ© Ã  PostgreSQL (donnÃ©es structurÃ©es).
/// - `AuditLog` : modÃ¨le MongoDB servant Ã  enregistrer les actions des utilisateurs.
/// - `express.Request/Response` : types HTTP dâ€™Express.
///
/// Ce mÃ©lange Postgres + Mongo illustre un **pattern hybride** :
/**
 * - PostgreSQL â†’ donnÃ©es transactionnelles (posts, utilisateursâ€¦)
 * - MongoDB â†’ logs, traces, analytics non structurÃ©s
 */
///
/// ----------------------------------------------------------------------------
/// ðŸ”¹ 3. DÃ©tails des fonctions
///
/// ðŸŸ¢ **listPosts**
/// - RÃ©cupÃ¨re tous les posts avec les infos minimales de lâ€™auteur (`id`, `name`).
/// - Utilise Prisma `findMany` avec un `include` pour effectuer une jointure.
/// - Envoie la liste au format JSON.
///
/// ðŸŸ¢ **getPost**
/// - RÃ©cupÃ¨re un post unique Ã  partir de `req.params.id`.
/// - Si le post nâ€™existe pas â†’ statut `404` et message dâ€™erreur JSON.
/// - Sinon, retourne le post complet.
///
/// ðŸŸ¢ **createPost**
/// - RÃ©cupÃ¨re `userId` depuis le token JWT (`req.user.sub`, injectÃ© par un middleware dâ€™authentification).
/// - Lit le `title`, `content` et Ã©ventuellement `req.file` (upload de couverture).
/// - CrÃ©e un post dans PostgreSQL via `prisma.post.create`.
/// - Ajoute un enregistrement dans MongoDB (table `AuditLog`) pour tracer lâ€™action.
/// - Retourne le post crÃ©Ã© avec un code `201 Created`.
///
/// ðŸŸ¢ **updatePost**
/// - Met Ã  jour un post existant (`title`, `content`, `coverUrl` si nouveau fichier).
/// - Utilise lâ€™opÃ©rateur JS `(coverUrl ? { coverUrl } : {})` pour ne modifier que si fourni.
/// - Retourne le post mis Ã  jour.
///
/// ðŸŸ¢ **deletePost**
/// - Supprime le post par son `id`.
/// - Retourne un JSON `{ ok: true }` en confirmation.
///
/// ----------------------------------------------------------------------------
/// ðŸ”¹ 4. Points pÃ©dagogiques clÃ©s
///
/// âœ… **Architecture REST**
/// Chaque fonction correspond Ã  une mÃ©thode HTTP (GET, POST, PUT, DELETE) et une intention mÃ©tier :
/**
 * - GET /posts        â†’ listPosts
 * - GET /posts/:id    â†’ getPost
 * - POST /posts       â†’ createPost
 * - PUT /posts/:id    â†’ updatePost
 * - DELETE /posts/:id â†’ deletePost
 */
///
/// âœ… **ORM et relations**
/// Lâ€™utilisation de Prisma permet dâ€™effectuer facilement des requÃªtes relationnelles
/// sans Ã©crire de SQL :
/**
 * include: { author: { select: { id: true, name: true } } }
 * âžœ Ã©quivaut Ã  une jointure "JOIN author ON post.authorId = author.id"
 */
///
/// âœ… **Typage & sÃ©curitÃ©**
/// - Les paramÃ¨tres (`req.params.id`) sont convertis en `Number` pour Ã©viter les erreurs.
/// - Les accÃ¨s utilisateurs passent par `req.user` (middleware JWT).
/// - Les rÃ©ponses sont toujours formatÃ©es en JSON (bonne pratique API).
///
/// âœ… **Audit et observabilitÃ©**
/// - `AuditLog.create(...)` dÃ©montre comment enregistrer les actions
///   dans une base sÃ©parÃ©e (Mongo), illustrant la sÃ©paration entre donnÃ©es
///   **fonctionnelles** et **techniques/logiques**.
///
/// âœ… **Gestion des fichiers**
/// - `req.file` provient dâ€™un middleware type `multer` chargÃ© avant la route.
/// - `coverUrl` stocke uniquement le chemin relatif, jamais le fichier lui-mÃªme.
///
/// ----------------------------------------------------------------------------
/// ðŸ”¹ 5. Bonnes pratiques Ã  rappeler
/// - Toujours valider les entrÃ©es (`title`, `content`) avant dâ€™insÃ©rer en DB.
/// - GÃ©rer les erreurs avec un `try/catch` global ou un middleware dâ€™erreurs.
/// - Ne pas exposer dâ€™informations sensibles dans les rÃ©ponses.
/// - Documenter les endpoints via Swagger / OpenAPI pour clartÃ© pÃ©dagogique.
/// - SÃ©parer les fonctions contrÃ´leurs du code routeur (MVC).
///
/// ----------------------------------------------------------------------------
/// ðŸ’¡ En rÃ©sumÃ©
/**
 * Ce fichier illustre un contrÃ´leur complet CRUD moderne, combinant :
 *   - Express (routing)
 *   - Prisma (ORM SQL)
 *   - Mongo (audit/logs)
 *
 * âž¤ PÃ©dagogiquement :
 *   - Il dÃ©montre le modÃ¨le MVC : routes â†’ contrÃ´leur â†’ base de donnÃ©es.
 *   - Il montre la valeur dâ€™un ORM pour manipuler des donnÃ©es relationnelles.
 *   - Il sensibilise Ã  lâ€™observation et Ã  la traÃ§abilitÃ© des actions utilisateurs.
 *   - Il prÃ©pare les Ã©tudiants Ã  concevoir une API REST propre et cohÃ©rente.
 */
/// ============================================================================