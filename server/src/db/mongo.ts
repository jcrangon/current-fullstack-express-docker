import mongoose from "mongoose";
import { env } from "../config/env";

export async function connectMongo() {
  if (mongoose.connection.readyState === 1) return;
  await mongoose.connect(env.MONGO_URL);
  console.log("[mongo] connected");
}

const AuditSchema = new mongoose.Schema({
  at: { type: Date, default: Date.now },
  userId: Number,
  action: String,
  meta: mongoose.Schema.Types.Mixed
});

export const AuditLog = mongoose.model("AuditLog", AuditSchema);

/// ============================================================================
/// üìò R√©sum√© p√©dagogique complet ‚Äî Connexion MongoDB et journalisation (AuditLog)
/// ----------------------------------------------------------------------------
/// üîπ 1. Objectif du fichier
/// Ce fichier d√©finit la **connexion √† MongoDB** (via Mongoose)
/// et d√©clare un mod√®le `AuditLog` utilis√© pour enregistrer les actions effectu√©es
/// par les utilisateurs dans l‚Äôapplication (journal d‚Äôaudit).
///
/// ‚û§ Il joue donc deux r√¥les :
/**
 * 1Ô∏è‚É£ G√©rer la connexion unique et persistante √† la base Mongo.
 * 2Ô∏è‚É£ D√©finir le sch√©ma Mongoose servant √† stocker les traces (Audit Logs).
 */
///
/// ----------------------------------------------------------------------------
/// üîπ 2. D√©pendances
/// - `mongoose` : ORM (Object Data Modeling) pour MongoDB, proche de Prisma pour SQL.
/// - `env.MONGO_URL` : variable d‚Äôenvironnement contenant l‚ÄôURL MongoDB,
///   inject√©e depuis `config/env.ts`.
///
/// Exemple d‚ÄôURL :
/**
 * mongodb://mongo:27017/appdb
 *  ‚Ü≥ mongo = nom du service Docker
 *  ‚Ü≥ 27017 = port standard de MongoDB
 *  ‚Ü≥ appdb  = nom de la base utilis√©e
 */
///
/// ----------------------------------------------------------------------------
/// üîπ 3. Fonction `connectMongo()`
/// Cette fonction √©tablit la connexion avec MongoDB en √©vitant les doublons.
///
/// √âtapes :
/**
 * 1Ô∏è‚É£ V√©rifie `mongoose.connection.readyState` :
 *     - 0 ‚Üí disconnected
 *     - 1 ‚Üí connected
 *     - 2 ‚Üí connecting
 *     - 3 ‚Üí disconnecting
 *
 *  Si la connexion est d√©j√† active (1), on quitte imm√©diatement.
 *
 * 2Ô∏è‚É£ Sinon, appelle `mongoose.connect(env.MONGO_URL)` :
 *     - √©tablit la connexion
 *     - cr√©e automatiquement le pool de connexions
 *     - garantit la persistance pour toutes les requ√™tes Mongoose.
 *
 * 3Ô∏è‚É£ Affiche `[mongo] connected` pour confirmer le succ√®s.
 */
///
/// ‚úÖ Avantage : la fonction peut √™tre appel√©e depuis plusieurs fichiers
/// (par exemple lors du d√©marrage du serveur ou dans les scripts de seed),
/// sans risquer de cr√©er plusieurs connexions simultan√©es.
///
/// ----------------------------------------------------------------------------
/// üîπ 4. D√©finition du sch√©ma `AuditSchema`
/// Le sch√©ma d√©crit la structure des documents stock√©s dans la collection Mongo.
///
/// Champs :
/**
 * - at       : Date de cr√©ation du log (d√©faut = Date.now)
 * - userId   : identifiant num√©rique de l‚Äôutilisateur (issu de PostgreSQL)
 * - action   : cha√Æne indiquant l‚Äôaction r√©alis√©e (ex: "POST_CREATED", "LOGIN_SUCCESS")
 * - meta     : champ flexible (type "Mixed") pour stocker tout type de donn√©es
 *              li√©es √† l‚Äô√©v√©nement (id du post, IP, contexte, etc.)
 */
///
/// Exemple de document enregistr√© :
/**
 * {
 *   "_id": "6717085eab92c83b1f9c1234",
 *   "at": "2025-10-21T12:00:00.000Z",
 *   "userId": 42,
 *   "action": "POST_CREATED",
 *   "meta": { "postId": 17 }
 * }
 */
///
/// ----------------------------------------------------------------------------
/// üîπ 5. D√©claration du mod√®le `AuditLog`
/// `mongoose.model("AuditLog", AuditSchema)` :
/**
 * ‚ûú Cr√©e (ou r√©cup√®re si d√©j√† d√©fini) un mod√®le li√© √† la collection "auditlogs".
 * ‚ûú Ce mod√®le est utilis√© dans tout le projet pour ins√©rer ou lire des journaux :
 *
 * Exemple :
 * await AuditLog.create({ userId, action: "LOGIN_SUCCESS" });
 * const logs = await AuditLog.find({ userId });
 */
///
/// ----------------------------------------------------------------------------
/// üîπ 6. Int√©r√™t p√©dagogique
///
/// ‚úÖ **Hybridation SQL + NoSQL**
/// Ce fichier illustre un cas fr√©quent en architecture moderne :
/// - PostgreSQL g√®re les donn√©es structur√©es (Users, Posts, Comments...),
/// - MongoDB stocke des donn√©es non-structur√©es ou volumineuses (logs, historiques...).
///
/// ‚úÖ **D√©couplage des responsabilit√©s**
/// - Le mod√®le `AuditLog` est ind√©pendant des entit√©s m√©tier.
/// - Il sert √† l‚Äôobservabilit√©, sans impacter la logique principale.
///
/// ‚úÖ **Souplesse de MongoDB**
/// - Le type `Mixed` permet de stocker des m√©tadonn√©es h√©t√©rog√®nes
///   (pas besoin de structure fixe comme en SQL).
///
/// ‚úÖ **Bonnes pratiques Mongoose**
/// - Connexion unique, r√©utilisable.
/// - Sch√©ma clair + mod√®le export√©.
/// - Utilisation d‚Äô`async/await` pour g√©rer les op√©rations asynchrones.
///
/// ----------------------------------------------------------------------------
/// üîπ 7. Bonnes pratiques √† retenir
/// - Toujours isoler la logique de connexion dans une fonction r√©utilisable.
/// - Utiliser des sch√©mas explicites (m√™me si Mongo est flexible).
/// - Ne jamais m√©langer les logs avec les donn√©es m√©tier.
/// - Pr√©f√©rer la cr√©ation d‚Äôun module `db/mongo.ts` d√©di√© (comme ici)
///   plut√¥t que de connecter Mongo dans plusieurs fichiers.
///
/// ----------------------------------------------------------------------------
/// üí° En r√©sum√©
/**
 * Ce fichier est un excellent exemple d‚Äôint√©gration NoSQL simple et claire :
 *
 *   - Une seule fonction pour g√©rer la connexion (idempotente).
 *   - Un sch√©ma `AuditLog` pour tracer les actions utilisateurs.
 *   - Un usage typique de MongoDB : stockage flexible des √©v√©nements.
 *
 * ‚û§ P√©dagogiquement :
 *   - Il montre comment compl√©ter une stack SQL avec du NoSQL.
 *   - Il introduit Mongoose et son typage.
 *   - Il illustre l‚Äôimportance des journaux applicatifs (audit, tra√ßabilit√©, s√©curit√©).
 */
/// ============================================================================